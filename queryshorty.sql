CREATE TABLE ASDP_OFFICE.USERS_URL
(
  ID                 NUMBER(19)                 NOT NULL,
  NAME               VARCHAR2(255 BYTE)         NOT NULL,
  EMAIL              VARCHAR2(255 BYTE)         NOT NULL,
  EMAIL_VERIFIED_AT  TIMESTAMP(6),
  PASSWORD           VARCHAR2(255 BYTE)         NOT NULL,
  REMEMBER_TOKEN     VARCHAR2(100 BYTE),
  CREATED_AT         TIMESTAMP(6),
  UPDATED_AT         TIMESTAMP(6)
)
TABLESPACE ASDP_OFFICE
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX ASDP_OFFICE.USERS_URL_EMAIL_UK ON ASDP_OFFICE.USERS_URL
(EMAIL)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE UNIQUE INDEX ASDP_OFFICE.USERS_URL_ID_PK ON ASDP_OFFICE.USERS_URL
(ID)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );



ALTER TABLE ASDP_OFFICE.USERS_URL ADD (
  CONSTRAINT USERS_URL_ID_PK
  PRIMARY KEY
  (ID)
  USING INDEX ASDP_OFFICE.USERS_URL_ID_PK
  ENABLE VALIDATE,
  CONSTRAINT USERS_URL_EMAIL_UK
  UNIQUE (EMAIL)
  USING INDEX ASDP_OFFICE.USERS_URL_EMAIL_UK
  ENABLE VALIDATE);


CREATE SEQUENCE ASDP_OFFICE.USERS_URL_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE OR REPLACE TRIGGER ASDP_OFFICE.users_url_id_trg
            before insert ON ASDP_OFFICE.USERS_URL
            for each row
begin
            if :new.ID is null then
                select users_url_id_seq.nextval into :new.ID from dual;
            end if;
            end;

/


CREATE TABLE ASDP_OFFICE.MIGRATIONS
(
  ID         NUMBER(10)                         NOT NULL,
  MIGRATION  VARCHAR2(255 BYTE)                 NOT NULL,
  BATCH      NUMBER(10)                         NOT NULL
)
TABLESPACE ASDP_OFFICE
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX ASDP_OFFICE.MIGRATIONS_ID_PK ON ASDP_OFFICE.MIGRATIONS
(ID)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );



ALTER TABLE ASDP_OFFICE.MIGRATIONS ADD (
  CONSTRAINT MIGRATIONS_ID_PK
  PRIMARY KEY
  (ID)
  USING INDEX ASDP_OFFICE.MIGRATIONS_ID_PK
  ENABLE VALIDATE);


CREATE SEQUENCE ASDP_OFFICE.MIGRATIONS_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE OR REPLACE TRIGGER ASDP_OFFICE.migrations_id_trg
            before insert ON ASDP_OFFICE.MIGRATIONS
            for each row
begin
            if :new.ID is null then
                select migrations_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/



CREATE TABLE ASDP_OFFICE.FAILED_JOBS
(
  ID          NUMBER(19)                        NOT NULL,
  UUID        VARCHAR2(255 BYTE)                NOT NULL,
  CONNECTION  CLOB                              NOT NULL,
  QUEUE       CLOB                              NOT NULL,
  PAYLOAD     CLOB                              NOT NULL,
  EXCEPTION   CLOB                              NOT NULL,
  FAILED_AT   TIMESTAMP(6)                      NOT NULL
)
LOB (CONNECTION) STORE AS BASICFILE (
  TABLESPACE  ASDP_OFFICE
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING)
LOB (QUEUE) STORE AS BASICFILE (
  TABLESPACE  ASDP_OFFICE
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING)
LOB (PAYLOAD) STORE AS BASICFILE (
  TABLESPACE  ASDP_OFFICE
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING)
LOB (EXCEPTION) STORE AS BASICFILE (
  TABLESPACE  ASDP_OFFICE
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING)
TABLESPACE ASDP_OFFICE
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX ASDP_OFFICE.FAILED_JOBS_ID_PK ON ASDP_OFFICE.FAILED_JOBS
(ID)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE UNIQUE INDEX ASDP_OFFICE.FAILED_JOBS_UUID_UK ON ASDP_OFFICE.FAILED_JOBS
(UUID)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );



ALTER TABLE ASDP_OFFICE.FAILED_JOBS ADD (
  CONSTRAINT FAILED_JOBS_ID_PK
  PRIMARY KEY
  (ID)
  USING INDEX ASDP_OFFICE.FAILED_JOBS_ID_PK
  ENABLE VALIDATE,
  CONSTRAINT FAILED_JOBS_UUID_UK
  UNIQUE (UUID)
  USING INDEX ASDP_OFFICE.FAILED_JOBS_UUID_UK
  ENABLE VALIDATE);


CREATE SEQUENCE ASDP_OFFICE.FAILED_JOBS_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE OR REPLACE TRIGGER ASDP_OFFICE.failed_jobs_id_trg
            before insert ON ASDP_OFFICE.FAILED_JOBS
            for each row
begin
            if :new.ID is null then
                select failed_jobs_id_seq.nextval into :new.ID from dual;
            end if;
            end;

/


CREATE TABLE ASDP_OFFICE.PASSWORD_RESETS
(
  EMAIL       VARCHAR2(255 BYTE)                NOT NULL,
  TOKEN       VARCHAR2(255 BYTE)                NOT NULL,
  CREATED_AT  TIMESTAMP(6)
)
TABLESPACE ASDP_OFFICE
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX ASDP_OFFICE.PASSWORD_RESETS_EMAIL_INDEX ON ASDP_OFFICE.PASSWORD_RESETS
(EMAIL)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );



CREATE TABLE ASDP_OFFICE.SHORT_URLS
(
  ID                              NUMBER(19)    NOT NULL,
  DESTINATION_URL                 CLOB          NOT NULL,
  URL_KEY                         VARCHAR2(255 BYTE) NOT NULL,
  DEFAULT_SHORT_URL               VARCHAR2(255 BYTE) NOT NULL,
  SINGLE_USE                      CHAR(1 BYTE)  NOT NULL,
  TRACK_VISITS                    CHAR(1 BYTE)  NOT NULL,
  CREATED_AT                      TIMESTAMP(6),
  UPDATED_AT                      TIMESTAMP(6),
  REDIRECT_STATUS_CODE            NUMBER(10)    DEFAULT '301'                 NOT NULL,
  TRACK_IP_ADDRESS                CHAR(1 BYTE)  DEFAULT '0'                   NOT NULL,
  TRACK_OPERATING_SYSTEM          CHAR(1 BYTE)  DEFAULT '0'                   NOT NULL,
  TRACK_OPERATING_SYSTEM_VERSION  CHAR(1 BYTE)  DEFAULT '0'                   NOT NULL,
  TRACK_BROWSER                   CHAR(1 BYTE)  DEFAULT '0'                   NOT NULL,
  TRACK_BROWSER_VERSION           CHAR(1 BYTE)  DEFAULT '0'                   NOT NULL,
  TRACK_REFERER_URL               CHAR(1 BYTE)  DEFAULT '0'                   NOT NULL,
  TRACK_DEVICE_TYPE               CHAR(1 BYTE)  DEFAULT '0'                   NOT NULL,
  ACTIVATED_AT                    TIMESTAMP(6)  DEFAULT '2023-11-17 03:22:20',
  DEACTIVATED_AT                  TIMESTAMP(6),
  FORWARD_QUERY_PARAMS            CHAR(1 BYTE)  DEFAULT '0'                   NOT NULL
)
LOB (DESTINATION_URL) STORE AS BASICFILE (
  TABLESPACE  ASDP_OFFICE
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  RETENTION
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          64K
                  NEXT             1M
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
TABLESPACE ASDP_OFFICE
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX ASDP_OFFICE.SHORT_URLS_ID_PK ON ASDP_OFFICE.SHORT_URLS
(ID)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE UNIQUE INDEX ASDP_OFFICE.SHORT_URLS_URL_KEY_UK ON ASDP_OFFICE.SHORT_URLS
(URL_KEY)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


ALTER TABLE ASDP_OFFICE.SHORT_URLS ADD (
  CONSTRAINT SHORT_URLS_ID_PK
  PRIMARY KEY
  (ID)
  USING INDEX ASDP_OFFICE.SHORT_URLS_ID_PK
  ENABLE VALIDATE,
  CONSTRAINT SHORT_URLS_URL_KEY_UK
  UNIQUE (URL_KEY)
  USING INDEX ASDP_OFFICE.SHORT_URLS_URL_KEY_UK
  ENABLE VALIDATE);



CREATE SEQUENCE ASDP_OFFICE.SHORT_URLS_ID_SEQ
  START WITH 41
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE OR REPLACE TRIGGER ASDP_OFFICE.short_urls_id_trg
            before insert ON ASDP_OFFICE.SHORT_URLS
            for each row
begin
            if :new.ID is null then
                select short_urls_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/



CREATE TABLE ASDP_OFFICE.SHORT_URL_VISITS
(
  ID                        NUMBER(19)          NOT NULL,
  SHORT_URL_ID              NUMBER(19)          NOT NULL,
  IP_ADDRESS                VARCHAR2(255 BYTE),
  OPERATING_SYSTEM          VARCHAR2(255 BYTE),
  OPERATING_SYSTEM_VERSION  VARCHAR2(255 BYTE),
  BROWSER                   VARCHAR2(255 BYTE),
  BROWSER_VERSION           VARCHAR2(255 BYTE),
  VISITED_AT                TIMESTAMP(6)        NOT NULL,
  CREATED_AT                TIMESTAMP(6),
  UPDATED_AT                TIMESTAMP(6),
  REFERER_URL               VARCHAR2(255 BYTE),
  DEVICE_TYPE               VARCHAR2(255 BYTE)
)
TABLESPACE ASDP_OFFICE
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX ASDP_OFFICE.SHORT_URL_VISITS_ID_PK ON ASDP_OFFICE.SHORT_URL_VISITS
(ID)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );



ALTER TABLE ASDP_OFFICE.SHORT_URL_VISITS ADD (
  CONSTRAINT SHORT_URL_VISITS_ID_PK
  PRIMARY KEY
  (ID)
  USING INDEX ASDP_OFFICE.SHORT_URL_VISITS_ID_PK
  ENABLE VALIDATE);

ALTER TABLE ASDP_OFFICE.SHORT_URL_VISITS ADD (
  CONSTRAINT SHOR_UR_VISIT_SHOR_UR_ID_FK 
  FOREIGN KEY (SHORT_URL_ID) 
  REFERENCES ASDP_OFFICE.SHORT_URLS (ID)
  ON DELETE CASCADE
  ENABLE VALIDATE);

CREATE SEQUENCE ASDP_OFFICE.SHORT_URL_VISITS_ID_SEQ
  START WITH 21
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE OR REPLACE TRIGGER ASDP_OFFICE.short_url_visits_id_trg
            before insert ON ASDP_OFFICE.SHORT_URL_VISITS
            for each row
begin
            if :new.ID is null then
                select short_url_visits_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/



CREATE TABLE ASDP_OFFICE.SHORT_URL_VISITS
(
  ID                        NUMBER(19)          NOT NULL,
  SHORT_URL_ID              NUMBER(19)          NOT NULL,
  IP_ADDRESS                VARCHAR2(255 BYTE),
  OPERATING_SYSTEM          VARCHAR2(255 BYTE),
  OPERATING_SYSTEM_VERSION  VARCHAR2(255 BYTE),
  BROWSER                   VARCHAR2(255 BYTE),
  BROWSER_VERSION           VARCHAR2(255 BYTE),
  VISITED_AT                TIMESTAMP(6)        NOT NULL,
  CREATED_AT                TIMESTAMP(6),
  UPDATED_AT                TIMESTAMP(6),
  REFERER_URL               VARCHAR2(255 BYTE),
  DEVICE_TYPE               VARCHAR2(255 BYTE)
)
TABLESPACE ASDP_OFFICE
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX ASDP_OFFICE.SHORT_URL_VISITS_ID_PK ON ASDP_OFFICE.SHORT_URL_VISITS
(ID)
LOGGING
TABLESPACE ASDP_OFFICE
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );



ALTER TABLE ASDP_OFFICE.SHORT_URL_VISITS ADD (
  CONSTRAINT SHORT_URL_VISITS_ID_PK
  PRIMARY KEY
  (ID)
  USING INDEX ASDP_OFFICE.SHORT_URL_VISITS_ID_PK
  ENABLE VALIDATE);

ALTER TABLE ASDP_OFFICE.SHORT_URL_VISITS ADD (
  CONSTRAINT SHOR_UR_VISIT_SHOR_UR_ID_FK 
  FOREIGN KEY (SHORT_URL_ID) 
  REFERENCES ASDP_OFFICE.SHORT_URLS (ID)
  ON DELETE CASCADE
  ENABLE VALIDATE);


CREATE SEQUENCE ASDP_OFFICE.SHORT_URL_VISITS_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE OR REPLACE TRIGGER ASDP_OFFICE.short_url_visits_id_trg
            before insert ON ASDP_OFFICE.SHORT_URL_VISITS
            for each row
begin
            if :new.ID is null then
                select short_url_visits_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/



